// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class User{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoUser reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserAddRosterContactNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String userId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserAdvancedSearchRoomsNative(IntPtr u, IntPtr fieldSet, IntPtr fieldRelations, IntPtr fieldValues, [MarshalAs(UnmanagedType.LPStr)]String searchToken, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserAdvancedSearchUsersNative(IntPtr u, IntPtr fieldSet, IntPtr fieldValues, [MarshalAs(UnmanagedType.LPStr)]String searchToken, uint index, uint pageSize, OnUserSearchResults onUserSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserAllowSubscriberNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String userId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserBlockSubscriberNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String userId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserConstructNative(IntPtr endpoint);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateCallNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String userId, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnCallCreated onCallCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateRoomFromIdNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String id, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateRoomFromKeyNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String roomKey, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateRoomWithIdNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String id, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateScheduledRoomNative(IntPtr u, IntPtr schedule, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateTestCallRoomNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserCreateTopicRoomNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String name, [MarshalAs(UnmanagedType.LPStr)]String description, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetAuthTypesNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnAuthTypes onAuthTypes, OnAuthTypesWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetContactNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String userId, OnGetContactResult onGetContactResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetConversationRoomNative(IntPtr u, IntPtr userIds, [MarshalAs(UnmanagedType.LPStr)]String createToken, OnRoomCreated onRoomCreated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetCurrentRosterNative(IntPtr u, IntPtr roster);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserGetEndpointNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetFavoriteRoomsNative(IntPtr u, uint index, uint pageSize, OnFavoriteRoomResults onFavoriteRoomResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserGetIdNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetPasswordResetUrlNative(IntPtr u, OnPasswordResetUrl onPasswordResetUrl);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetRecentRoomsNative(IntPtr u, uint index, uint pageSize, OnRecentRoomResults onRecentRoomResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserGetStatsNative(IntPtr r, IntPtr stats);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserGetWebProxyAddressNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserInvalidateTokenOnLogoutNative(IntPtr user, Boolean invalidate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String username, [MarshalAs(UnmanagedType.LPStr)]String password, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginAsGuestNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String displayName, [MarshalAs(UnmanagedType.LPStr)]String roomKey, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginWithAccessTokenNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String accessToken, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginWithCACNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String certificate, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginWithRefreshTokenNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String refreshToken, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginWithSAMLNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String key, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLoginWithTenantTokenNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String provisionToken, [MarshalAs(UnmanagedType.LPStr)]String host, uint port, [MarshalAs(UnmanagedType.LPStr)]String serviceType, OnLoginComplete onLoginComplete, OnLoggedOut onLoggedOut, OnConnectionStatusChanged onConnectionStatusChanged, OnTokenReceived onTokenReceived, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserLogoutNative(IntPtr user);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserPauseUpdateNotificationNative(IntPtr u, Boolean pauseUpdateNotification);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserRegisterCallEventListenerNative(IntPtr u, OnCallCreatedByInvite onCallCreatedByInvite);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserRegisterContactEventListenerNative(IntPtr u, OnUpdateSelf onUpdateSelf, OnUpdateRosterContact onUpdateRosterContact, OnRemoveRosterContact onRemoveRosterContact);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserRegisterLicenseEventListenerNative(IntPtr u, OnLicenseReceived onLicenseReceived, OnGetLicenseKey onGetLicenseKey);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserRegisterRoomEventListenerNative(IntPtr u, OnRoomCreatedByInvite onRoomCreatedByInvite, OnRoomInviteCancelled onRoomInviteCancelled);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserRemoveRosterContactNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String userId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchConversationRoomsNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchRoomsNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchRoomsWithNameNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchRoomsWithOwnerNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchRoomsWithSubjectNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchTopicRoomsNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnRoomSearchResults onRoomSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserSearchUsersNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String searchText, uint index, uint pageSize, OnUserSearchResults onUserSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserSetCANative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String ca, [MarshalAs(UnmanagedType.LPStr)]String caFilePath, [MarshalAs(UnmanagedType.LPStr)]String caDir);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserSetDisplayNameNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String displayName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserSetTCPTransportNative(IntPtr u, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserSetUDPTransportNative(IntPtr u, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserSetWebProxyAddressCredentialsNative(IntPtr u, [MarshalAs(UnmanagedType.LPStr)]String proxyAddress, [MarshalAs(UnmanagedType.LPStr)]String username, [MarshalAs(UnmanagedType.LPStr)]String password);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoUserSetWebProxyTransportNative(IntPtr u, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserUnregisterCallEventListenerNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserUnregisterContactEventListenerNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserUnregisterLicenseEventListenerNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserUnregisterRoomEventListenerNative(IntPtr u);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoUserUpdatePresenceNative(IntPtr u, [MarshalAs(UnmanagedType.I4)]Contact.ContactPresenceState state, [MarshalAs(UnmanagedType.LPStr)]String status);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoUserGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoUserSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnAuthTypes(IntPtr u, UserGetAuthTypesResult result, IntPtr authTypes);
		private static OnAuthTypes _mOnAuthTypes;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnAuthTypesGetauthTypesArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnAuthTypesFreeauthTypesArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnAuthTypesWebProxyCredentialsRequest(IntPtr u, IntPtr webProxyAddress);
		private static OnAuthTypesWebProxyCredentialsRequest _mOnAuthTypesWebProxyCredentialsRequest;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnCallCreated(IntPtr u, IntPtr call, UserCallCreateResult result, IntPtr createToken);
		private static OnCallCreated _mOnCallCreated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnCallCreatedByInvite(IntPtr u, IntPtr call, IntPtr inviter);
		private static OnCallCreatedByInvite _mOnCallCreatedByInvite;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnConnectionStatusChanged(IntPtr u, UserConnectionStatusChangedReason reason);
		private static OnConnectionStatusChanged _mOnConnectionStatusChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnFavoriteRoomResults(IntPtr u, UserSearchResult searchResult, IntPtr roomInfo);
		private static OnFavoriteRoomResults _mOnFavoriteRoomResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnFavoriteRoomResultsGetroomInfoArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnFavoriteRoomResultsFreeroomInfoArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnGetContactResult(IntPtr u, IntPtr contact, UserGetContactResult result);
		private static OnGetContactResult _mOnGetContactResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnGetLicenseKey(IntPtr u, IntPtr licenseKey);
		private static OnGetLicenseKey _mOnGetLicenseKey;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLicenseReceived(IntPtr u, IntPtr licenseKey);
		private static OnLicenseReceived _mOnLicenseReceived;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLoggedOut(IntPtr u, UserLogoutReason reason);
		private static OnLoggedOut _mOnLoggedOut;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLoginComplete(IntPtr u, UserLoginResult result, Boolean secure, IntPtr capabilities);
		private static OnLoginComplete _mOnLoginComplete;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnPasswordResetUrl(IntPtr u, IntPtr passwordResetUrl);
		private static OnPasswordResetUrl _mOnPasswordResetUrl;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRecentRoomResults(IntPtr u, UserSearchResult searchResult, IntPtr roomInfo);
		private static OnRecentRoomResults _mOnRecentRoomResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnRecentRoomResultsGetroomInfoArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnRecentRoomResultsFreeroomInfoArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoveRosterContact(IntPtr u, IntPtr uri);
		private static OnRemoveRosterContact _mOnRemoveRosterContact;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRoomCreated(IntPtr u, IntPtr room, UserRoomCreateResult result, IntPtr createToken);
		private static OnRoomCreated _mOnRoomCreated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRoomCreatedByInvite(IntPtr u, IntPtr room, IntPtr inviter, IntPtr message);
		private static OnRoomCreatedByInvite _mOnRoomCreatedByInvite;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRoomInviteCancelled(IntPtr u, IntPtr roomInfo, IntPtr message);
		private static OnRoomInviteCancelled _mOnRoomInviteCancelled;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRoomSearchResults(IntPtr u, IntPtr searchText, UserSearchResult searchResult, IntPtr roomInfo, ulong numRecords);
		private static OnRoomSearchResults _mOnRoomSearchResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnRoomSearchResultsGetroomInfoArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnRoomSearchResultsFreeroomInfoArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnTokenReceived(IntPtr u, IntPtr token, UserTokenType tokenType);
		private static OnTokenReceived _mOnTokenReceived;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUpdateRosterContact(IntPtr u, IntPtr contact);
		private static OnUpdateRosterContact _mOnUpdateRosterContact;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUpdateSelf(IntPtr u, IntPtr contact);
		private static OnUpdateSelf _mOnUpdateSelf;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUserSearchResults(IntPtr u, IntPtr searchText, UserSearchResult searchResult, IntPtr contacts, ulong numRecords);
		private static OnUserSearchResults _mOnUserSearchResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnUserSearchResultsGetcontactsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoUserOnUserSearchResultsFreecontactsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnWebProxyCredentialsRequest(IntPtr u, IntPtr webProxyAddress);
		private static OnWebProxyCredentialsRequest _mOnWebProxyCredentialsRequest;
		public enum RoomSearchField{
			RoomsearchfieldOwner,
			RoomsearchfieldAdmin,
			RoomsearchfieldModerator,
			RoomsearchfieldMember,
			RoomsearchfieldUser,
			RoomsearchfieldName,
			RoomsearchfieldSubject,
			RoomsearchfieldType,
			RoomsearchfieldPublic,
			RoomsearchfieldNonMembers
		}
		public enum RoomSearchFieldRelation{
			RoomsearchfieldrelationAND,
			RoomsearchfieldrelationOR
		}
		public enum UserAuthType{
			UserauthtypeGuest,
			UserauthtypePassword,
			UserauthtypeAccessToken,
			UserauthtypeRefreshToken,
			UserauthtypeProvisionToken,
			UserauthtypeFacebook,
			UserauthtypeSaml,
			UserauthtypeCac
		}
		public enum UserCallCreateResult{
			UsercallcreateresultOK,
			UsercallcreateresultNoResponse,
			UsercallcreateresultNotAllowed,
			UsercallcreateresultMiscLocalError,
			UsercallcreateresultMiscRemoteError
		}
		public enum UserConnectionStatusChangedReason{
			UserconnectionstatuschangedreasonOK,
			UserconnectionstatuschangedreasonLostContactWithServer,
			UserconnectionstatuschangedreasonNoCommunicationWithServer,
			UserconnectionstatuschangedreasonNoValidNetworkInterfaces,
			UserconnectionstatuschangedreasonNetworkInterfaceChanged,
			UserconnectionstatuschangedreasonMiscNetworkError,
			UserconnectionstatuschangedreasonConnectionError
		}
		public enum UserGetAuthTypesResult{
			UsergetauthtypesresultOK,
			UsergetauthtypesresultConnectionFailed,
			UsergetauthtypesresultConnectionLost,
			UsergetauthtypesresultConnectionTimeout,
			UsergetauthtypesresultNoResponse,
			UsergetauthtypesresultWebProxyAuthenticationFailed,
			UsergetauthtypesresultTlsFailed,
			UsergetauthtypesresultServiceUnavailable,
			UsergetauthtypesresultMiscLocalError,
			UsergetauthtypesresultMiscRemoteError,
			UsergetauthtypesresultUnSupportedTenantVersion,
			UsergetauthtypesresultNoValidNetworkInterface
		}
		public enum UserGetContactResult{
			UsergetcontactresultOK,
			UsergetcontactresultNoResponse,
			UsergetcontactresultUnauthorized,
			UsergetcontactresultMiscLocalError,
			UsergetcontactresultMiscRemoteError
		}
		public enum UserLoginResult{
			UserloginresultOK,
			UserloginresultConnectionFailed,
			UserloginresultConnectionLost,
			UserloginresultConnectionTimeout,
			UserloginresultNoResponse,
			UserloginresultTerminated,
			UserloginresultInvalidUser,
			UserloginresultInvalidPassword,
			UserloginresultMiscAuthError,
			UserloginresultCancelled,
			UserloginresultMiscError,
			UserloginresultWebProxyAuthenticationRequired,
			UserloginresultServiceUnavailable,
			UserloginresultRoomIsFull,
			UserloginresultRoomIsDisabled,
			UserloginresultTlsFailed,
			UserloginresultCertificateVerificationFailed,
			UserloginresultUnsupportedTenantVersion,
			UserloginresultNoValidNetworkInterface
		}
		public enum UserLogoutReason{
			UserlogoutreasonLoggedOut,
			UserlogoutreasonConnectionLost,
			UserlogoutreasonConnectionTimeout,
			UserlogoutreasonNoResponse,
			UserlogoutreasonTerminated,
			UserlogoutreasonMiscError,
			UserlogoutreasonLoggedInElsewhere,
			UserlogoutreasonNetworkInterfaceChanged,
			UserlogoutreasonOutOfLicenses,
			UserlogoutreasonEpClientBadConnection,
			UserlogoutreasonEpClientBadVersion,
			UserlogoutreasonEpClientBadSessionId,
			UserlogoutreasonEpClientBadComms,
			UserlogoutreasonEpClientRebootRequested,
			UserlogoutreasonEpClientShutdownRequested,
			UserlogoutreasonEpClientRestartRequested,
			UserlogoutreasonEpClientInternalError,
			UserlogoutreasonEndpointNotBound,
			UserlogoutreasonInvalidAuth,
			UserlogoutreasonEpClientStartFailure
		}
		public enum UserRoomCreateResult{
			UserroomcreateresultOK,
			UserroomcreateresultNoResponse,
			UserroomcreateresultNotFound,
			UserroomcreateresultUnauthorized,
			UserroomcreateresultMiscLocalError,
			UserroomcreateresultMiscRemoteError,
			UserroomcreateresultDuplicateName,
			UserroomcreateresultLimitReached,
			UserroomcreateresultNotSupported
		}
		public enum UserSearchField{
			UsersearchfieldUID,
			UsersearchfieldEMAIL,
			UsersearchfieldNAME,
			UsersearchfieldTELNO
		}
		public enum UserSearchResult{
			UsersearchresultOK,
			UsersearchresultNoRecords,
			UsersearchresultNoResponse,
			UsersearchresultMiscLocalError,
			UsersearchresultMiscRemoteError
		}
		public enum UserState{
			UserstateIdle,
			UserstateLoggingIn,
			UserstateLoggedIn,
			UserstateReconnecting,
			UserstateRequestingAuthenticationTypes
		}
		public enum UserTokenType{
			UsertokentypeRefreshToken,
			UsertokentypeAccessToken
		}
		public interface IAdvancedSearchRooms{

			void OnRoomSearchResults(String searchText, UserSearchResult searchResult, List<RoomInfo> roomInfo, ulong numRecords);
		}
		public interface IAdvancedSearchUsers{

			void OnUserSearchResults(String searchText, UserSearchResult searchResult, List<ContactInfo> contacts, ulong numRecords);
		}
		public interface ICreateCall{

			void OnCallCreated(Call call, UserCallCreateResult result, String createToken);
		}
		public interface ICreateRoomFromId{

			void OnRoomCreated(Room room, UserRoomCreateResult result, String createToken);
		}
		public interface IGetAuthTypes{

			void OnAuthTypes(UserGetAuthTypesResult result, List<UserAuthenticationInfo> authTypes);
			void OnAuthTypesWebProxyCredentialsRequest(String webProxyAddress);
		}
		public interface IGetContact{

			void OnGetContactResult(Contact contact, UserGetContactResult result);
		}
		public interface IGetFavoriteRooms{

			void OnFavoriteRoomResults(UserSearchResult searchResult, List<RoomInfo> roomInfo);
		}
		public interface IGetPasswordResetUrl{

			void OnPasswordResetUrl(String passwordResetUrl);
		}
		public interface IGetRecentRooms{

			void OnRecentRoomResults(UserSearchResult searchResult, List<RoomInfo> roomInfo);
		}
		public interface ILogin{

			void OnLoginComplete(UserLoginResult result, Boolean secure, TenantCapabilities capabilities);
			void OnLoggedOut(UserLogoutReason reason);
			void OnConnectionStatusChanged(UserConnectionStatusChangedReason reason);
			void OnTokenReceived(String token, UserTokenType tokenType);
			void OnWebProxyCredentialsRequest(String webProxyAddress);
		}
		public interface IRegisterCallEventListener{

			void OnCallCreatedByInvite(Call call, Contact inviter);
		}
		public interface IRegisterContactEventListener{

			void OnUpdateSelf(Contact contact);
			void OnUpdateRosterContact(Contact contact);
			void OnRemoveRosterContact(String uri);
		}
		public interface IRegisterLicenseEventListener{

			void OnLicenseReceived(String licenseKey);
			void OnGetLicenseKey(String licenseKey);
		}
		public interface IRegisterRoomEventListener{

			void OnRoomCreatedByInvite(Room room, Contact inviter, String message);
			void OnRoomInviteCancelled(RoomInfo roomInfo, String message);
		}
		public class TenantCapabilities{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoTenantCapabilities reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetLoginAttemptInfoNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetLoginAttemptInfoArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoTenantCapabilitiesFreeLoginAttemptInfoArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetWSGMicroserviceAddressNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetchangePasswordUrlNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetendpointBehaviorNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetendpointBehaviorArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoTenantCapabilitiesFreeendpointBehaviorArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisCreatePublicRoomEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisGuestEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisLoginBannerEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisOpusAudioEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisPersonalRoomEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisPublicChatEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisRoomModerationEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisScheduledRoomEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisSdk220EnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisTestCallEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisWSGMicroserviceEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoTenantCapabilitiesGetisWelcomeBannerEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetloginBannerDataNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern int VidyoTenantCapabilitiesGetmaximumRoomPinLengthNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern int VidyoTenantCapabilitiesGetminimumRoomPinLengthNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoTenantCapabilitiesGetwelcomeBannerDataNative(IntPtr obj);

			public List<UserLoginInfo> LoginAttemptInfo;
			public String WSGMicroserviceAddress;
			public String changePasswordUrl;
			public List<Property> endpointBehavior;
			public Boolean isCreatePublicRoomEnabled;
			public Boolean isGuestEnabled;
			public Boolean isLoginBannerEnabled;
			public Boolean isOpusAudioEnabled;
			public Boolean isPersonalRoomEnabled;
			public Boolean isPublicChatEnabled;
			public Boolean isRoomModerationEnabled;
			public Boolean isScheduledRoomEnabled;
			public Boolean isSdk220Enabled;
			public Boolean isTestCallEnabled;
			public Boolean isWSGMicroserviceEnabled;
			public Boolean isWelcomeBannerEnabled;
			public String loginBannerData;
			public int maximumRoomPinLength;
			public int minimumRoomPinLength;
			public String welcomeBannerData;
			public TenantCapabilities(IntPtr obj){
				objPtr = obj;

				List<UserLoginInfo> csLoginAttemptInfo = new List<UserLoginInfo>();
				int nLoginAttemptInfoSize = 0;
				IntPtr nLoginAttemptInfo = VidyoTenantCapabilitiesGetLoginAttemptInfoArrayNative(VidyoTenantCapabilitiesGetLoginAttemptInfoNative(objPtr), ref nLoginAttemptInfoSize);
				int nLoginAttemptInfoIndex = 0;
				while (nLoginAttemptInfoIndex < nLoginAttemptInfoSize) {
					UserLoginInfo csTLoginAttemptInfo = new UserLoginInfo(Marshal.ReadIntPtr(nLoginAttemptInfo + (nLoginAttemptInfoIndex * Marshal.SizeOf(nLoginAttemptInfo))));
					csLoginAttemptInfo.Add(csTLoginAttemptInfo);
					nLoginAttemptInfoIndex++;
				}

				List<Property> csEndpointBehavior = new List<Property>();
				int nEndpointBehaviorSize = 0;
				IntPtr nEndpointBehavior = VidyoTenantCapabilitiesGetendpointBehaviorArrayNative(VidyoTenantCapabilitiesGetendpointBehaviorNative(objPtr), ref nEndpointBehaviorSize);
				int nEndpointBehaviorIndex = 0;
				while (nEndpointBehaviorIndex < nEndpointBehaviorSize) {
					Property csTendpointBehavior = new Property(Marshal.ReadIntPtr(nEndpointBehavior + (nEndpointBehaviorIndex * Marshal.SizeOf(nEndpointBehavior))));
					csEndpointBehavior.Add(csTendpointBehavior);
					nEndpointBehaviorIndex++;
				}

				LoginAttemptInfo = csLoginAttemptInfo;
				WSGMicroserviceAddress = Marshal.PtrToStringAnsi(VidyoTenantCapabilitiesGetWSGMicroserviceAddressNative(objPtr));
				changePasswordUrl = Marshal.PtrToStringAnsi(VidyoTenantCapabilitiesGetchangePasswordUrlNative(objPtr));
				endpointBehavior = csEndpointBehavior;
				isCreatePublicRoomEnabled = VidyoTenantCapabilitiesGetisCreatePublicRoomEnabledNative(objPtr);
				isGuestEnabled = VidyoTenantCapabilitiesGetisGuestEnabledNative(objPtr);
				isLoginBannerEnabled = VidyoTenantCapabilitiesGetisLoginBannerEnabledNative(objPtr);
				isOpusAudioEnabled = VidyoTenantCapabilitiesGetisOpusAudioEnabledNative(objPtr);
				isPersonalRoomEnabled = VidyoTenantCapabilitiesGetisPersonalRoomEnabledNative(objPtr);
				isPublicChatEnabled = VidyoTenantCapabilitiesGetisPublicChatEnabledNative(objPtr);
				isRoomModerationEnabled = VidyoTenantCapabilitiesGetisRoomModerationEnabledNative(objPtr);
				isScheduledRoomEnabled = VidyoTenantCapabilitiesGetisScheduledRoomEnabledNative(objPtr);
				isSdk220Enabled = VidyoTenantCapabilitiesGetisSdk220EnabledNative(objPtr);
				isTestCallEnabled = VidyoTenantCapabilitiesGetisTestCallEnabledNative(objPtr);
				isWSGMicroserviceEnabled = VidyoTenantCapabilitiesGetisWSGMicroserviceEnabledNative(objPtr);
				isWelcomeBannerEnabled = VidyoTenantCapabilitiesGetisWelcomeBannerEnabledNative(objPtr);
				loginBannerData = Marshal.PtrToStringAnsi(VidyoTenantCapabilitiesGetloginBannerDataNative(objPtr));
				maximumRoomPinLength = VidyoTenantCapabilitiesGetmaximumRoomPinLengthNative(objPtr);
				minimumRoomPinLength = VidyoTenantCapabilitiesGetminimumRoomPinLengthNative(objPtr);
				welcomeBannerData = Marshal.PtrToStringAnsi(VidyoTenantCapabilitiesGetwelcomeBannerDataNative(objPtr));
				VidyoTenantCapabilitiesFreeendpointBehaviorArrayNative(nEndpointBehavior, nEndpointBehaviorSize);
				VidyoTenantCapabilitiesFreeLoginAttemptInfoArrayNative(nLoginAttemptInfo, nLoginAttemptInfoSize);
			}
		};
		public class UserAuthenticationInfo{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoUserAuthenticationInfo reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I4)]
			private static extern User.UserAuthType VidyoUserAuthenticationInfoGetauthTypeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoUserAuthenticationInfoGetpropertyNative(IntPtr obj);

			public User.UserAuthType authType;
			public Property property;
			public UserAuthenticationInfo(IntPtr obj){
				objPtr = obj;

				Property csProperty = new Property(VidyoUserAuthenticationInfoGetpropertyNative(objPtr));
				authType = VidyoUserAuthenticationInfoGetauthTypeNative(objPtr);
				property = csProperty;
			}
		};
		public class UserLoginInfo{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoUserLoginInfo reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoUserLoginInfoGetresultNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoUserLoginInfoGetsourceIpNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoUserLoginInfoGettimestampNative(IntPtr obj);

			public String result;
			public String sourceIp;
			public String timestamp;
			public UserLoginInfo(IntPtr obj){
				objPtr = obj;

				result = Marshal.PtrToStringAnsi(VidyoUserLoginInfoGetresultNative(objPtr));
				sourceIp = Marshal.PtrToStringAnsi(VidyoUserLoginInfoGetsourceIpNative(objPtr));
				timestamp = Marshal.PtrToStringAnsi(VidyoUserLoginInfoGettimestampNative(objPtr));
			}
		};
		private static IAdvancedSearchRooms _mIAdvancedSearchRooms;
		private static IAdvancedSearchUsers _mIAdvancedSearchUsers;
		private static ICreateCall _mICreateCall;
		private static ICreateRoomFromId _mICreateRoomFromId;
		private static IGetAuthTypes _mIGetAuthTypes;
		private static IGetContact _mIGetContact;
		private static IGetFavoriteRooms _mIGetFavoriteRooms;
		private static IGetPasswordResetUrl _mIGetPasswordResetUrl;
		private static IGetRecentRooms _mIGetRecentRooms;
		private static ILogin _mILogin;
		private static IRegisterCallEventListener _mIRegisterCallEventListener;
		private static IRegisterContactEventListener _mIRegisterContactEventListener;
		private static IRegisterLicenseEventListener _mIRegisterLicenseEventListener;
		private static IRegisterRoomEventListener _mIRegisterRoomEventListener;
		public User(Endpoint endpoint){
			objPtr = VidyoUserConstructNative(endpoint.GetObjectPtr());
			VidyoUserSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		public User(IntPtr other){
			objPtr = VidyoUserConstructCopyNative(other);
			VidyoUserSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~User(){
			if(objPtr != IntPtr.Zero){
				VidyoUserSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoUserDestructNative(objPtr);
			}
		}
		public Boolean AddRosterContact(String userId){

			Boolean ret = VidyoUserAddRosterContactNative(objPtr, userId);

			return ret;
		}
		public Boolean AdvancedSearchRooms(List<RoomSearchField> fieldSet, List<RoomSearchFieldRelation> fieldRelations, List<String> fieldValues, String searchToken, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			IntPtr nFieldSet = IntPtr.Zero;

			IntPtr nFieldRelations = IntPtr.Zero;

			IntPtr nFieldValues = IntPtr.Zero;

			Boolean ret = VidyoUserAdvancedSearchRoomsNative(objPtr, nFieldSet, nFieldRelations, nFieldValues, searchToken, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean AdvancedSearchUsers(List<UserSearchField> fieldSet, List<String> fieldValues, String searchToken, uint index, uint pageSize, IAdvancedSearchUsers _iIAdvancedSearchUsers){
			_mIAdvancedSearchUsers = _iIAdvancedSearchUsers;
			_mOnUserSearchResults = OnUserSearchResultsDelegate;

			IntPtr nFieldSet = IntPtr.Zero;

			IntPtr nFieldValues = IntPtr.Zero;

			Boolean ret = VidyoUserAdvancedSearchUsersNative(objPtr, nFieldSet, nFieldValues, searchToken, index, pageSize, _mOnUserSearchResults);

			return ret;
		}
		public Boolean AllowSubscriber(String userId){

			Boolean ret = VidyoUserAllowSubscriberNative(objPtr, userId);

			return ret;
		}
		public Boolean BlockSubscriber(String userId){

			Boolean ret = VidyoUserBlockSubscriberNative(objPtr, userId);

			return ret;
		}
		public Boolean CreateCall(String userId, String createToken, ICreateCall _iICreateCall){
			_mICreateCall = _iICreateCall;
			_mOnCallCreated = OnCallCreatedDelegate;

			Boolean ret = VidyoUserCreateCallNative(objPtr, userId, createToken, _mOnCallCreated);

			return ret;
		}
		public Boolean CreateRoomFromId(String id, String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			Boolean ret = VidyoUserCreateRoomFromIdNative(objPtr, id, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean CreateRoomFromKey(String roomKey, String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			Boolean ret = VidyoUserCreateRoomFromKeyNative(objPtr, roomKey, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean CreateRoomWithId(String id, String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			Boolean ret = VidyoUserCreateRoomWithIdNative(objPtr, id, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean CreateScheduledRoom(EventSchedule schedule, String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			Boolean ret = VidyoUserCreateScheduledRoomNative(objPtr, (schedule != null) ? schedule.GetObjectPtr():IntPtr.Zero, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean CreateTestCallRoom(String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			Boolean ret = VidyoUserCreateTestCallRoomNative(objPtr, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean CreateTopicRoom(String name, String description, String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			Boolean ret = VidyoUserCreateTopicRoomNative(objPtr, name, description, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean GetAuthTypes(String host, uint port, String serviceType, IGetAuthTypes _iIGetAuthTypes){
			_mIGetAuthTypes = _iIGetAuthTypes;
			_mOnAuthTypes = OnAuthTypesDelegate;
			_mOnAuthTypesWebProxyCredentialsRequest = OnAuthTypesWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserGetAuthTypesNative(objPtr, host, port, serviceType, _mOnAuthTypes, _mOnAuthTypesWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean GetContact(String userId, IGetContact _iIGetContact){
			_mIGetContact = _iIGetContact;
			_mOnGetContactResult = OnGetContactResultDelegate;

			Boolean ret = VidyoUserGetContactNative(objPtr, userId, _mOnGetContactResult);

			return ret;
		}
		public Boolean GetConversationRoom(List<String> userIds, String createToken, ICreateRoomFromId _iICreateRoomFromId){
			_mICreateRoomFromId = _iICreateRoomFromId;
			_mOnRoomCreated = OnRoomCreatedDelegate;

			IntPtr nUserIds = IntPtr.Zero;

			Boolean ret = VidyoUserGetConversationRoomNative(objPtr, nUserIds, createToken, _mOnRoomCreated);

			return ret;
		}
		public Boolean GetCurrentRoster(List<Contact> roster){

			IntPtr nRoster = IntPtr.Zero;

			Boolean ret = VidyoUserGetCurrentRosterNative(objPtr, nRoster);

			return ret;
		}
		public Endpoint GetEndpoint(){

			IntPtr ret = VidyoUserGetEndpointNative(objPtr);
			Endpoint csRet = null;
			if(ret != IntPtr.Zero){
				if(Endpoint.VidyoEndpointGetUserDataNative(ret) == IntPtr.Zero)
					csRet = new Endpoint(ret);
				else{
					GCHandle objHandle = (GCHandle)Endpoint.VidyoEndpointGetUserDataNative(ret);
					csRet = (Endpoint)objHandle.Target;
				}
			}

			return csRet;
		}
		public Boolean GetFavoriteRooms(uint index, uint pageSize, IGetFavoriteRooms _iIGetFavoriteRooms){
			_mIGetFavoriteRooms = _iIGetFavoriteRooms;
			_mOnFavoriteRoomResults = OnFavoriteRoomResultsDelegate;

			Boolean ret = VidyoUserGetFavoriteRoomsNative(objPtr, index, pageSize, _mOnFavoriteRoomResults);

			return ret;
		}
		public String GetId(){

			IntPtr ret = VidyoUserGetIdNative(objPtr);

			return Marshal.PtrToStringAnsi(ret);
		}
		public Boolean GetPasswordResetUrl(IGetPasswordResetUrl _iIGetPasswordResetUrl){
			_mIGetPasswordResetUrl = _iIGetPasswordResetUrl;
			_mOnPasswordResetUrl = OnPasswordResetUrlDelegate;

			Boolean ret = VidyoUserGetPasswordResetUrlNative(objPtr, _mOnPasswordResetUrl);

			return ret;
		}
		public Boolean GetRecentRooms(uint index, uint pageSize, IGetRecentRooms _iIGetRecentRooms){
			_mIGetRecentRooms = _iIGetRecentRooms;
			_mOnRecentRoomResults = OnRecentRoomResultsDelegate;

			Boolean ret = VidyoUserGetRecentRoomsNative(objPtr, index, pageSize, _mOnRecentRoomResults);

			return ret;
		}
		public Boolean GetStats(UserStats stats){

			Boolean ret = VidyoUserGetStatsNative(objPtr, (stats != null) ? stats.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public String GetWebProxyAddress(){

			IntPtr ret = VidyoUserGetWebProxyAddressNative(objPtr);

			return Marshal.PtrToStringAnsi(ret);
		}
		public Boolean InvalidateTokenOnLogout(Boolean invalidate){

			Boolean ret = VidyoUserInvalidateTokenOnLogoutNative(objPtr, invalidate);

			return ret;
		}
		public Boolean Login(String username, String password, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginNative(objPtr, username, password, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean LoginAsGuest(String displayName, String roomKey, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginAsGuestNative(objPtr, displayName, roomKey, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean LoginWithAccessToken(String accessToken, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginWithAccessTokenNative(objPtr, accessToken, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean LoginWithCAC(String certificate, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginWithCACNative(objPtr, certificate, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean LoginWithRefreshToken(String refreshToken, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginWithRefreshTokenNative(objPtr, refreshToken, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean LoginWithSAML(String key, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginWithSAMLNative(objPtr, key, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean LoginWithTenantToken(String provisionToken, String host, uint port, String serviceType, ILogin _iILogin){
			_mILogin = _iILogin;
			_mOnLoginComplete = OnLoginCompleteDelegate;
			_mOnLoggedOut = OnLoggedOutDelegate;
			_mOnConnectionStatusChanged = OnConnectionStatusChangedDelegate;
			_mOnTokenReceived = OnTokenReceivedDelegate;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoUserLoginWithTenantTokenNative(objPtr, provisionToken, host, port, serviceType, _mOnLoginComplete, _mOnLoggedOut, _mOnConnectionStatusChanged, _mOnTokenReceived, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean Logout(){

			Boolean ret = VidyoUserLogoutNative(objPtr);

			return ret;
		}
		public Boolean PauseUpdateNotification(Boolean pauseUpdateNotification){

			Boolean ret = VidyoUserPauseUpdateNotificationNative(objPtr, pauseUpdateNotification);

			return ret;
		}
		public Boolean RegisterCallEventListener(IRegisterCallEventListener _iIRegisterCallEventListener){
			_mIRegisterCallEventListener = _iIRegisterCallEventListener;
			_mOnCallCreatedByInvite = OnCallCreatedByInviteDelegate;

			Boolean ret = VidyoUserRegisterCallEventListenerNative(objPtr, _mOnCallCreatedByInvite);

			return ret;
		}
		public Boolean RegisterContactEventListener(IRegisterContactEventListener _iIRegisterContactEventListener){
			_mIRegisterContactEventListener = _iIRegisterContactEventListener;
			_mOnUpdateSelf = OnUpdateSelfDelegate;
			_mOnUpdateRosterContact = OnUpdateRosterContactDelegate;
			_mOnRemoveRosterContact = OnRemoveRosterContactDelegate;

			Boolean ret = VidyoUserRegisterContactEventListenerNative(objPtr, _mOnUpdateSelf, _mOnUpdateRosterContact, _mOnRemoveRosterContact);

			return ret;
		}
		public Boolean RegisterLicenseEventListener(IRegisterLicenseEventListener _iIRegisterLicenseEventListener){
			_mIRegisterLicenseEventListener = _iIRegisterLicenseEventListener;
			_mOnLicenseReceived = OnLicenseReceivedDelegate;
			_mOnGetLicenseKey = OnGetLicenseKeyDelegate;

			Boolean ret = VidyoUserRegisterLicenseEventListenerNative(objPtr, _mOnLicenseReceived, _mOnGetLicenseKey);

			return ret;
		}
		public Boolean RegisterRoomEventListener(IRegisterRoomEventListener _iIRegisterRoomEventListener){
			_mIRegisterRoomEventListener = _iIRegisterRoomEventListener;
			_mOnRoomCreatedByInvite = OnRoomCreatedByInviteDelegate;
			_mOnRoomInviteCancelled = OnRoomInviteCancelledDelegate;

			Boolean ret = VidyoUserRegisterRoomEventListenerNative(objPtr, _mOnRoomCreatedByInvite, _mOnRoomInviteCancelled);

			return ret;
		}
		public Boolean RemoveRosterContact(String userId){

			Boolean ret = VidyoUserRemoveRosterContactNative(objPtr, userId);

			return ret;
		}
		public Boolean SearchConversationRooms(String searchText, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			Boolean ret = VidyoUserSearchConversationRoomsNative(objPtr, searchText, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean SearchRooms(String searchText, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			Boolean ret = VidyoUserSearchRoomsNative(objPtr, searchText, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean SearchRoomsWithName(String searchText, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			Boolean ret = VidyoUserSearchRoomsWithNameNative(objPtr, searchText, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean SearchRoomsWithOwner(String searchText, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			Boolean ret = VidyoUserSearchRoomsWithOwnerNative(objPtr, searchText, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean SearchRoomsWithSubject(String searchText, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			Boolean ret = VidyoUserSearchRoomsWithSubjectNative(objPtr, searchText, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean SearchTopicRooms(String searchText, uint index, uint pageSize, IAdvancedSearchRooms _iIAdvancedSearchRooms){
			_mIAdvancedSearchRooms = _iIAdvancedSearchRooms;
			_mOnRoomSearchResults = OnRoomSearchResultsDelegate;

			Boolean ret = VidyoUserSearchTopicRoomsNative(objPtr, searchText, index, pageSize, _mOnRoomSearchResults);

			return ret;
		}
		public Boolean SearchUsers(String searchText, uint index, uint pageSize, IAdvancedSearchUsers _iIAdvancedSearchUsers){
			_mIAdvancedSearchUsers = _iIAdvancedSearchUsers;
			_mOnUserSearchResults = OnUserSearchResultsDelegate;

			Boolean ret = VidyoUserSearchUsersNative(objPtr, searchText, index, pageSize, _mOnUserSearchResults);

			return ret;
		}
		public void SetCA(String ca, String caFilePath, String caDir){

			VidyoUserSetCANative(objPtr, ca, caFilePath, caDir);
		}
		public void SetDisplayName(String displayName){

			VidyoUserSetDisplayNameNative(objPtr, displayName);
		}
		public void SetTCPTransport(Boolean enable){

			VidyoUserSetTCPTransportNative(objPtr, enable);
		}
		public void SetUDPTransport(Boolean enable){

			VidyoUserSetUDPTransportNative(objPtr, enable);
		}
		public void SetWebProxyAddressCredentials(String proxyAddress, String username, String password){

			VidyoUserSetWebProxyAddressCredentialsNative(objPtr, proxyAddress, username, password);
		}
		public void SetWebProxyTransport(Boolean enable){

			VidyoUserSetWebProxyTransportNative(objPtr, enable);
		}
		public Boolean UnregisterCallEventListener(){

			Boolean ret = VidyoUserUnregisterCallEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterContactEventListener(){

			Boolean ret = VidyoUserUnregisterContactEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLicenseEventListener(){

			Boolean ret = VidyoUserUnregisterLicenseEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRoomEventListener(){

			Boolean ret = VidyoUserUnregisterRoomEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UpdatePresence(Contact.ContactPresenceState state, String status){

			Boolean ret = VidyoUserUpdatePresenceNative(objPtr, state, status);

			return ret;
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnAuthTypes))]
#endif
		private static void OnAuthTypesDelegate(IntPtr u, UserGetAuthTypesResult result, IntPtr authTypes){
			List<UserAuthenticationInfo> csAuthTypes = new List<UserAuthenticationInfo>();
			int nAuthTypesSize = 0;
			IntPtr nAuthTypes = VidyoUserOnAuthTypesGetauthTypesArrayNative(authTypes, ref nAuthTypesSize);
			int nAuthTypesIndex = 0;
			while (nAuthTypesIndex < nAuthTypesSize) {
				UserAuthenticationInfo csTauthTypes = new UserAuthenticationInfo(Marshal.ReadIntPtr(nAuthTypes + (nAuthTypesIndex * Marshal.SizeOf(nAuthTypes))));
				csAuthTypes.Add(csTauthTypes);
				nAuthTypesIndex++;
			}

			if(_mIGetAuthTypes != null)
				_mIGetAuthTypes.OnAuthTypes(result, csAuthTypes);
			VidyoUserOnAuthTypesFreeauthTypesArrayNative(nAuthTypes, nAuthTypesSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnAuthTypesWebProxyCredentialsRequest))]
#endif
		private static void OnAuthTypesWebProxyCredentialsRequestDelegate(IntPtr u, IntPtr webProxyAddress){
			if(_mIGetAuthTypes != null)
				_mIGetAuthTypes.OnAuthTypesWebProxyCredentialsRequest(Marshal.PtrToStringAnsi(webProxyAddress));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnCallCreated))]
#endif
		private static void OnCallCreatedDelegate(IntPtr u, IntPtr call, UserCallCreateResult result, IntPtr createToken){
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			if(_mICreateCall != null)
				_mICreateCall.OnCallCreated(csCall, result, Marshal.PtrToStringAnsi(createToken));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnCallCreatedByInvite))]
#endif
		private static void OnCallCreatedByInviteDelegate(IntPtr u, IntPtr call, IntPtr inviter){
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Contact csInviter = new Contact(inviter);
			if(_mIRegisterCallEventListener != null)
				_mIRegisterCallEventListener.OnCallCreatedByInvite(csCall, csInviter);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnConnectionStatusChanged))]
#endif
		private static void OnConnectionStatusChangedDelegate(IntPtr u, UserConnectionStatusChangedReason reason){
			if(_mILogin != null)
				_mILogin.OnConnectionStatusChanged(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnFavoriteRoomResults))]
#endif
		private static void OnFavoriteRoomResultsDelegate(IntPtr u, UserSearchResult searchResult, IntPtr roomInfo){
			List<RoomInfo> csRoomInfo = new List<RoomInfo>();
			int nRoomInfoSize = 0;
			IntPtr nRoomInfo = VidyoUserOnFavoriteRoomResultsGetroomInfoArrayNative(roomInfo, ref nRoomInfoSize);
			int nRoomInfoIndex = 0;
			while (nRoomInfoIndex < nRoomInfoSize) {
				RoomInfo csTroomInfo = new RoomInfo(Marshal.ReadIntPtr(nRoomInfo + (nRoomInfoIndex * Marshal.SizeOf(nRoomInfo))));
				csRoomInfo.Add(csTroomInfo);
				nRoomInfoIndex++;
			}

			if(_mIGetFavoriteRooms != null)
				_mIGetFavoriteRooms.OnFavoriteRoomResults(searchResult, csRoomInfo);
			VidyoUserOnFavoriteRoomResultsFreeroomInfoArrayNative(nRoomInfo, nRoomInfoSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnGetContactResult))]
#endif
		private static void OnGetContactResultDelegate(IntPtr u, IntPtr contact, UserGetContactResult result){
			Contact csContact = new Contact(contact);
			if(_mIGetContact != null)
				_mIGetContact.OnGetContactResult(csContact, result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnGetLicenseKey))]
#endif
		private static void OnGetLicenseKeyDelegate(IntPtr u, IntPtr licenseKey){
			if(_mIRegisterLicenseEventListener != null)
				_mIRegisterLicenseEventListener.OnGetLicenseKey(Marshal.PtrToStringAnsi(licenseKey));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLicenseReceived))]
#endif
		private static void OnLicenseReceivedDelegate(IntPtr u, IntPtr licenseKey){
			if(_mIRegisterLicenseEventListener != null)
				_mIRegisterLicenseEventListener.OnLicenseReceived(Marshal.PtrToStringAnsi(licenseKey));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLoggedOut))]
#endif
		private static void OnLoggedOutDelegate(IntPtr u, UserLogoutReason reason){
			if(_mILogin != null)
				_mILogin.OnLoggedOut(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLoginComplete))]
#endif
		private static void OnLoginCompleteDelegate(IntPtr u, UserLoginResult result, Boolean secure, IntPtr capabilities){
			TenantCapabilities csCapabilities = new TenantCapabilities(capabilities);
			if(_mILogin != null)
				_mILogin.OnLoginComplete(result, secure, csCapabilities);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnPasswordResetUrl))]
#endif
		private static void OnPasswordResetUrlDelegate(IntPtr u, IntPtr passwordResetUrl){
			if(_mIGetPasswordResetUrl != null)
				_mIGetPasswordResetUrl.OnPasswordResetUrl(Marshal.PtrToStringAnsi(passwordResetUrl));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRecentRoomResults))]
#endif
		private static void OnRecentRoomResultsDelegate(IntPtr u, UserSearchResult searchResult, IntPtr roomInfo){
			List<RoomInfo> csRoomInfo = new List<RoomInfo>();
			int nRoomInfoSize = 0;
			IntPtr nRoomInfo = VidyoUserOnRecentRoomResultsGetroomInfoArrayNative(roomInfo, ref nRoomInfoSize);
			int nRoomInfoIndex = 0;
			while (nRoomInfoIndex < nRoomInfoSize) {
				RoomInfo csTroomInfo = new RoomInfo(Marshal.ReadIntPtr(nRoomInfo + (nRoomInfoIndex * Marshal.SizeOf(nRoomInfo))));
				csRoomInfo.Add(csTroomInfo);
				nRoomInfoIndex++;
			}

			if(_mIGetRecentRooms != null)
				_mIGetRecentRooms.OnRecentRoomResults(searchResult, csRoomInfo);
			VidyoUserOnRecentRoomResultsFreeroomInfoArrayNative(nRoomInfo, nRoomInfoSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoveRosterContact))]
#endif
		private static void OnRemoveRosterContactDelegate(IntPtr u, IntPtr uri){
			if(_mIRegisterContactEventListener != null)
				_mIRegisterContactEventListener.OnRemoveRosterContact(Marshal.PtrToStringAnsi(uri));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRoomCreated))]
#endif
		private static void OnRoomCreatedDelegate(IntPtr u, IntPtr room, UserRoomCreateResult result, IntPtr createToken){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(_mICreateRoomFromId != null)
				_mICreateRoomFromId.OnRoomCreated(csRoom, result, Marshal.PtrToStringAnsi(createToken));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRoomCreatedByInvite))]
#endif
		private static void OnRoomCreatedByInviteDelegate(IntPtr u, IntPtr room, IntPtr inviter, IntPtr message){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Contact csInviter = new Contact(inviter);
			if(_mIRegisterRoomEventListener != null)
				_mIRegisterRoomEventListener.OnRoomCreatedByInvite(csRoom, csInviter, Marshal.PtrToStringAnsi(message));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRoomInviteCancelled))]
#endif
		private static void OnRoomInviteCancelledDelegate(IntPtr u, IntPtr roomInfo, IntPtr message){
			RoomInfo csRoomInfo = new RoomInfo(roomInfo);
			if(_mIRegisterRoomEventListener != null)
				_mIRegisterRoomEventListener.OnRoomInviteCancelled(csRoomInfo, Marshal.PtrToStringAnsi(message));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRoomSearchResults))]
#endif
		private static void OnRoomSearchResultsDelegate(IntPtr u, IntPtr searchText, UserSearchResult searchResult, IntPtr roomInfo, ulong numRecords){
			List<RoomInfo> csRoomInfo = new List<RoomInfo>();
			int nRoomInfoSize = 0;
			IntPtr nRoomInfo = VidyoUserOnRoomSearchResultsGetroomInfoArrayNative(roomInfo, ref nRoomInfoSize);
			int nRoomInfoIndex = 0;
			while (nRoomInfoIndex < nRoomInfoSize) {
				RoomInfo csTroomInfo = new RoomInfo(Marshal.ReadIntPtr(nRoomInfo + (nRoomInfoIndex * Marshal.SizeOf(nRoomInfo))));
				csRoomInfo.Add(csTroomInfo);
				nRoomInfoIndex++;
			}

			if(_mIAdvancedSearchRooms != null)
				_mIAdvancedSearchRooms.OnRoomSearchResults(Marshal.PtrToStringAnsi(searchText), searchResult, csRoomInfo, numRecords);
			VidyoUserOnRoomSearchResultsFreeroomInfoArrayNative(nRoomInfo, nRoomInfoSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnTokenReceived))]
#endif
		private static void OnTokenReceivedDelegate(IntPtr u, IntPtr token, UserTokenType tokenType){
			if(_mILogin != null)
				_mILogin.OnTokenReceived(Marshal.PtrToStringAnsi(token), tokenType);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUpdateRosterContact))]
#endif
		private static void OnUpdateRosterContactDelegate(IntPtr u, IntPtr contact){
			Contact csContact = new Contact(contact);
			if(_mIRegisterContactEventListener != null)
				_mIRegisterContactEventListener.OnUpdateRosterContact(csContact);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUpdateSelf))]
#endif
		private static void OnUpdateSelfDelegate(IntPtr u, IntPtr contact){
			Contact csContact = new Contact(contact);
			if(_mIRegisterContactEventListener != null)
				_mIRegisterContactEventListener.OnUpdateSelf(csContact);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUserSearchResults))]
#endif
		private static void OnUserSearchResultsDelegate(IntPtr u, IntPtr searchText, UserSearchResult searchResult, IntPtr contacts, ulong numRecords){
			List<ContactInfo> csContacts = new List<ContactInfo>();
			int nContactsSize = 0;
			IntPtr nContacts = VidyoUserOnUserSearchResultsGetcontactsArrayNative(contacts, ref nContactsSize);
			int nContactsIndex = 0;
			while (nContactsIndex < nContactsSize) {
				ContactInfo csTcontacts = new ContactInfo(Marshal.ReadIntPtr(nContacts + (nContactsIndex * Marshal.SizeOf(nContacts))));
				csContacts.Add(csTcontacts);
				nContactsIndex++;
			}

			if(_mIAdvancedSearchUsers != null)
				_mIAdvancedSearchUsers.OnUserSearchResults(Marshal.PtrToStringAnsi(searchText), searchResult, csContacts, numRecords);
			VidyoUserOnUserSearchResultsFreecontactsArrayNative(nContacts, nContactsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnWebProxyCredentialsRequest))]
#endif
		private static void OnWebProxyCredentialsRequestDelegate(IntPtr u, IntPtr webProxyAddress){
			if(_mILogin != null)
				_mILogin.OnWebProxyCredentialsRequest(Marshal.PtrToStringAnsi(webProxyAddress));
		}
	};
}
