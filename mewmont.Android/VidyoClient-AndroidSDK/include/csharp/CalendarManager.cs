// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class CalendarManager{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoCalendarManager reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarManagerConstructNative(IntPtr feedback);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarManagerCreateCalendarInstanceNative(IntPtr calMgr, IntPtr feedback, [MarshalAs(UnmanagedType.LPStr)]String pluginServiceId, [MarshalAs(UnmanagedType.LPStr)]String calendarName, [MarshalAs(UnmanagedType.LPStr)]String createToken);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarManagerDestroyCalendarInstanceNative(IntPtr calMgr, IntPtr cal);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoCalendarManagerDestructNative(IntPtr calendarMgr);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarManagerGetCalendarRegisteredServicesNative(IntPtr cm, IntPtr svcNames);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarManagerRegisterCalendarServiceNative(IntPtr cm, [MarshalAs(UnmanagedType.LPStr)]String pluginServiceName, [MarshalAs(UnmanagedType.LPStr)]String dllName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoCalendarManagerGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoCalendarManagerSetUserDataNative(IntPtr obj, IntPtr userData);

		public CalendarManager(CalendarManagerFeedback feedback){
			objPtr = VidyoCalendarManagerConstructNative(feedback.GetObjectPtr());
			VidyoCalendarManagerSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~CalendarManager(){
			if(objPtr != IntPtr.Zero){
				VidyoCalendarManagerSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoCalendarManagerDestructNative(objPtr);
			}
		}
		public Boolean CreateCalendarInstance(CalendarFeedback feedback, String pluginServiceId, String calendarName, String createToken){

			Boolean ret = VidyoCalendarManagerCreateCalendarInstanceNative(objPtr, (feedback != null) ? feedback.GetObjectPtr():IntPtr.Zero, pluginServiceId, calendarName, createToken);

			return ret;
		}
		public Boolean DestroyCalendarInstance(Calendar cal){

			Boolean ret = VidyoCalendarManagerDestroyCalendarInstanceNative(objPtr, (cal != null) ? cal.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean GetCalendarRegisteredServices(List<String> svcNames){

			IntPtr nSvcNames = IntPtr.Zero;

			Boolean ret = VidyoCalendarManagerGetCalendarRegisteredServicesNative(objPtr, nSvcNames);

			return ret;
		}
		public Boolean RegisterCalendarService(String pluginServiceName, String dllName){

			Boolean ret = VidyoCalendarManagerRegisterCalendarServiceNative(objPtr, pluginServiceName, dllName);

			return ret;
		}
	};
}
